generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  COMPANY
  ADMIN
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  password              String
  role                  Role                   @default(COMPANY)
  emailVerified         DateTime?
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  forms                 Form[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Form {
  id          String        @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections    FormSection[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FormSection {
  id     String      @id @default(uuid())
  title  String
  order  Int
  formId String
  fields FormField[]
  form   Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormField {
  id           String         @id @default(uuid())
  label        String
  fieldType    String
  required     Boolean
  order        String
  placeholder  String?
  defaultValue String?
  sectionId    String
  section      FormSection    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  option       FieldOptions[]
}

model FieldOptions {
  id      String    @id
  value   String
  label   String
  order   Int
  fieldId String
  field   FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
